package com.washify.apis.controller;

import com.washify.apis.dto.request.PromotionRequest;
import com.washify.apis.dto.response.ApiResponse;
import com.washify.apis.dto.response.PromotionResponse;
import com.washify.apis.service.PromotionService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.List;

/**
 * REST Controller x·ª≠ l√Ω c√°c API li√™n quan ƒë·∫øn Promotion (m√£ gi·∫£m gi√°/khuy·∫øn m√£i)
 */
@RestController
@RequestMapping("/promotions")
@RequiredArgsConstructor
@Tag(name = "üéÅ Promotions", description = "Qu·∫£n l√Ω m√£ gi·∫£m gi√°/khuy·∫øn m√£i - üëî Staff/Admin, üåê Public (xem)")
public class PromotionController {
    
    private final PromotionService promotionService;
    
    /**
     * T·∫°o promotion m·ªõi
     * POST /api/promotions
     * Ch·ªâ Staff v√† Admin
     */
    @PostMapping
    @PreAuthorize("hasAnyRole('STAFF', 'ADMIN', 'MANAGER')")
    @Operation(summary = "T·∫°o m√£ gi·∫£m gi√° m·ªõi", description = "**Access:** üëî Staff/Admin/Manager\n\nT·∫°o m√£ khuy·∫øn m√£i m·ªõi cho h·ªá th·ªëng")
    public ResponseEntity<ApiResponse<PromotionResponse>> createPromotion(@Valid @RequestBody PromotionRequest request) {
        PromotionResponse promotion = promotionService.createPromotion(request);
        return ResponseEntity.status(HttpStatus.CREATED)
                .body(ApiResponse.success(promotion, "T·∫°o m√£ khuy·∫øn m√£i th√†nh c√¥ng"));
    }
    
    /**
     * L·∫•y promotion theo ID
     * GET /api/promotions/{id}
     * Public - ai c≈©ng c√≥ th·ªÉ xem
     */
    @GetMapping("/{id}")
    @Operation(summary = "Xem chi ti·∫øt m√£ gi·∫£m gi√°", description = "**Access:** üåê Public\n\nXem th√¥ng tin chi ti·∫øt v·ªÅ m√£ khuy·∫øn m√£i")
    public ResponseEntity<ApiResponse<PromotionResponse>> getPromotionById(@PathVariable Long id) {
        PromotionResponse promotion = promotionService.getPromotionById(id);
        return ResponseEntity.ok(ApiResponse.success(promotion, "L·∫•y th√¥ng tin khuy·∫øn m√£i th√†nh c√¥ng"));
    }
    
    /**
     * L·∫•y promotion theo code
     * GET /api/promotions/code/{code}
     * Public - ai c≈©ng c√≥ th·ªÉ xem
     */
    @GetMapping("/code/{code}")
    @Operation(summary = "T√¨m m√£ gi·∫£m gi√° theo code", description = "**Access:** üåê Public\n\nT√¨m ki·∫øm khuy·∫øn m√£i b·∫±ng m√£ code (VD: SUMMER2025)")
    public ResponseEntity<ApiResponse<PromotionResponse>> getPromotionByCode(@PathVariable String code) {
        PromotionResponse promotion = promotionService.getPromotionByCode(code);
        return ResponseEntity.ok(ApiResponse.success(promotion, "L·∫•y th√¥ng tin khuy·∫øn m√£i th√†nh c√¥ng"));
    }
    
    /**
     * L·∫•y t·∫•t c·∫£ promotions
     * GET /api/promotions
     * Ch·ªâ Staff v√† Admin
     */
    @GetMapping
    @PreAuthorize("hasAnyRole('STAFF', 'ADMIN', 'MANAGER')")
    @Operation(summary = "L·∫•y t·∫•t c·∫£ m√£ gi·∫£m gi√°", description = "**Access:** üëî Staff/Admin/Manager\n\nL·∫•y danh s√°ch t·∫•t c·∫£ m√£ khuy·∫øn m√£i (bao g·ªìm inactive v√† expired)")
    public ResponseEntity<ApiResponse<List<PromotionResponse>>> getAllPromotions() {
        List<PromotionResponse> promotions = promotionService.getAllPromotions();
        return ResponseEntity.ok(ApiResponse.success(promotions, "L·∫•y danh s√°ch khuy·∫øn m√£i th√†nh c√¥ng"));
    }
    
    /**
     * L·∫•y c√°c promotions ƒëang active
     * GET /api/promotions/active
     * Public - ai c≈©ng c√≥ th·ªÉ xem
     */
    @GetMapping("/active")
    @Operation(summary = "L·∫•y m√£ gi·∫£m gi√° ƒëang active", description = "**Access:** üåê Public\n\nL·∫•y danh s√°ch c√°c m√£ khuy·∫øn m√£i ƒëang ho·∫°t ƒë·ªông")
    public ResponseEntity<ApiResponse<List<PromotionResponse>>> getActivePromotions() {
        List<PromotionResponse> promotions = promotionService.getActivePromotions();
        return ResponseEntity.ok(ApiResponse.success(promotions, "L·∫•y danh s√°ch khuy·∫øn m√£i active th√†nh c√¥ng"));
    }
    
    /**
     * L·∫•y c√°c promotions ƒëang valid (active v√† trong th·ªùi h·∫°n)
     * GET /api/promotions/valid
     * Public - ai c≈©ng c√≥ th·ªÉ xem
     */
    @GetMapping("/valid")
    @Operation(summary = "L·∫•y m√£ gi·∫£m gi√° h·ª£p l·ªá", description = "**Access:** üåê Public\n\nL·∫•y danh s√°ch c√°c m√£ khuy·∫øn m√£i ƒëang ho·∫°t ƒë·ªông v√† trong th·ªùi h·∫°n s·ª≠ d·ª•ng")
    public ResponseEntity<ApiResponse<List<PromotionResponse>>> getValidPromotions() {
        List<PromotionResponse> promotions = promotionService.getValidPromotions();
        return ResponseEntity.ok(ApiResponse.success(promotions, "L·∫•y danh s√°ch khuy·∫øn m√£i h·ª£p l·ªá th√†nh c√¥ng"));
    }
    
    /**
     * Validate promotion code
     * POST /api/promotions/validate
     * Public - customer c·∫ßn validate tr∆∞·ªõc khi √°p d·ª•ng
     */
    @PostMapping("/validate")
    @Operation(summary = "Ki·ªÉm tra m√£ gi·∫£m gi√°", description = "**Access:** üåê Public\n\nKi·ªÉm tra xem m√£ khuy·∫øn m√£i c√≥ h·ª£p l·ªá kh√¥ng v√† t√≠nh s·ªë ti·ªÅn gi·∫£m")
    public ResponseEntity<ApiResponse<PromotionService.PromotionValidationResponse>> validatePromotion(
            @RequestParam String code,
            @RequestParam BigDecimal orderAmount) {
        PromotionService.PromotionValidationResponse validation = 
            promotionService.validatePromotionCode(code, orderAmount);
        
        if (validation.isValid()) {
            return ResponseEntity.ok(ApiResponse.success(validation, "M√£ khuy·∫øn m√£i h·ª£p l·ªá"));
        } else {
            return ResponseEntity.ok(ApiResponse.<PromotionService.PromotionValidationResponse>builder()
                    .success(false)
                    .message(validation.getMessage())
                    .data(validation)
                    .timestamp(java.time.LocalDateTime.now())
                    .build());
        }
    }
    
    /**
     * L·∫•y th·ªëng k√™ usage c·ªßa promotion
     * GET /api/promotions/{id}/usage
     * Ch·ªâ Staff v√† Admin
     */
    @GetMapping("/{id}/usage")
    @PreAuthorize("hasAnyRole('STAFF', 'ADMIN', 'MANAGER')")
    @Operation(summary = "Th·ªëng k√™ s·ª≠ d·ª•ng m√£ gi·∫£m gi√°", description = "**Access:** üëî Staff/Admin/Manager\n\nXem s·ªë l·∫ßn m√£ khuy·∫øn m√£i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng")
    public ResponseEntity<ApiResponse<PromotionService.PromotionUsageResponse>> getPromotionUsage(@PathVariable Long id) {
        PromotionService.PromotionUsageResponse usage = promotionService.getPromotionUsage(id);
        return ResponseEntity.ok(ApiResponse.success(usage, "L·∫•y th·ªëng k√™ s·ª≠ d·ª•ng th√†nh c√¥ng"));
    }
    
    /**
     * C·∫≠p nh·∫≠t promotion
     * PUT /api/promotions/{id}
     * Ch·ªâ Staff v√† Admin
     */
    @PutMapping("/{id}")
    @PreAuthorize("hasAnyRole('STAFF', 'ADMIN', 'MANAGER')")
    @Operation(summary = "C·∫≠p nh·∫≠t m√£ gi·∫£m gi√°", description = "**Access:** üëî Staff/Admin/Manager\n\nC·∫≠p nh·∫≠t th√¥ng tin m√£ khuy·∫øn m√£i")
    public ResponseEntity<ApiResponse<PromotionResponse>> updatePromotion(
            @PathVariable Long id,
            @Valid @RequestBody PromotionRequest request) {
        PromotionResponse promotion = promotionService.updatePromotion(id, request);
        return ResponseEntity.ok(ApiResponse.success(promotion, "C·∫≠p nh·∫≠t khuy·∫øn m√£i th√†nh c√¥ng"));
    }
    
    /**
     * K√≠ch ho·∫°t promotion
     * PATCH /api/promotions/{id}/activate
     * Ch·ªâ Staff v√† Admin
     */
    @PatchMapping("/{id}/activate")
    @PreAuthorize("hasAnyRole('STAFF', 'ADMIN', 'MANAGER')")
    @Operation(summary = "K√≠ch ho·∫°t m√£ gi·∫£m gi√°", description = "**Access:** üëî Staff/Admin/Manager\n\nK√≠ch ho·∫°t m√£ khuy·∫øn m√£i")
    public ResponseEntity<ApiResponse<PromotionResponse>> activatePromotion(@PathVariable Long id) {
        PromotionResponse promotion = promotionService.activatePromotion(id);
        return ResponseEntity.ok(ApiResponse.success(promotion, "K√≠ch ho·∫°t khuy·∫øn m√£i th√†nh c√¥ng"));
    }
    
    /**
     * V√¥ hi·ªáu h√≥a promotion
     * PATCH /api/promotions/{id}/deactivate
     * Ch·ªâ Staff v√† Admin
     */
    @PatchMapping("/{id}/deactivate")
    @PreAuthorize("hasAnyRole('STAFF', 'ADMIN', 'MANAGER')")
    @Operation(summary = "V√¥ hi·ªáu h√≥a m√£ gi·∫£m gi√°", description = "**Access:** üëî Staff/Admin/Manager\n\nV√¥ hi·ªáu h√≥a m√£ khuy·∫øn m√£i (t·∫°m ng∆∞ng s·ª≠ d·ª•ng)")
    public ResponseEntity<ApiResponse<PromotionResponse>> deactivatePromotion(@PathVariable Long id) {
        PromotionResponse promotion = promotionService.deactivatePromotion(id);
        return ResponseEntity.ok(ApiResponse.success(promotion, "V√¥ hi·ªáu h√≥a khuy·∫øn m√£i th√†nh c√¥ng"));
    }
    
    /**
     * X√≥a promotion (soft delete)
     * DELETE /api/promotions/{id}
     * Ch·ªâ Admin
     */
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "X√≥a m√£ gi·∫£m gi√°", description = "**Access:** üîí Admin only\n\nX√≥a m√£ khuy·∫øn m√£i (soft delete - c√≥ th·ªÉ restore)")
    public ResponseEntity<ApiResponse<Void>> deletePromotion(@PathVariable Long id) {
        promotionService.deletePromotion(id);
        return ResponseEntity.ok(ApiResponse.success("X√≥a khuy·∫øn m√£i th√†nh c√¥ng"));
    }
}
