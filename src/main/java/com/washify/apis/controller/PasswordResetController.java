package com.washify.apis.controller;

import com.washify.apis.dto.request.ForgotPasswordRequest;
import com.washify.apis.dto.request.ResetPasswordRequest;
import com.washify.apis.dto.response.ApiResponse;
import com.washify.apis.service.PasswordResetService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

/**
 * Controller x·ª≠ l√Ω reset password qua email
 * Kh√¥ng c·∫ßn authentication v√¨ user qu√™n m·∫≠t kh·∫©u
 */
@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
@Tag(name = "üîë Password Management", description = "Qu√™n m·∫≠t kh·∫©u, ƒë·ªïi m·∫≠t kh·∫©u, reset password")
public class PasswordResetController {
    
    private final PasswordResetService passwordResetService;
    
    /**
     * B∆∞·ªõc 1: Request forgot password (g·ª≠i email v·ªõi token)
     * POST /api/auth/forgot-password
     * Public endpoint - kh√¥ng c·∫ßn authentication
     */
    @PostMapping("/forgot-password")
    @Operation(
        summary = "üåê Qu√™n m·∫≠t kh·∫©u (B∆∞·ªõc 1)", 
        description = """
            **Access:** üåê Public - Kh√¥ng c·∫ßn authentication
            
            G·ª≠i email reset password cho user qu√™n m·∫≠t kh·∫©u.
            
            **Email Verification:**
            - Check format email
            - Check disposable email (block)
            - Check MX records (domain t·ªìn t·∫°i)
            
            **Flow:**
            1. User nh·∫≠p email
            2. System verify email
            3. T·∫°o token (30 ph√∫t)
            4. G·ª≠i email v·ªõi link reset
            
            **Security:**
            - Kh√¥ng ti·∫øt l·ªô email c√≥ t·ªìn t·∫°i hay kh√¥ng
            - Lu√¥n return success message
            - Token one-time use
            
            **Response:**
            - Success message (d√π email c√≥ t·ªìn t·∫°i hay kh√¥ng)
            """
    )
    public ResponseEntity<ApiResponse<Void>> forgotPassword(
            @Valid @RequestBody ForgotPasswordRequest request) {
        
        try {
            passwordResetService.createPasswordResetToken(request.getEmail());
            return ResponseEntity.ok(ApiResponse.success(
                "Email reset password ƒë√£ ƒë∆∞·ª£c g·ª≠i. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ c·ªßa b·∫°n."));
        } catch (Exception e) {
            // Kh√¥ng ti·∫øt l·ªô email c√≥ t·ªìn t·∫°i hay kh√¥ng (security)
            return ResponseEntity.ok(ApiResponse.success(
                "N·∫øu email t·ªìn t·∫°i trong h·ªá th·ªëng, b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email reset password."));
        }
    }
    
    /**
     * B∆∞·ªõc 2: Validate token c√≥ h·ª£p l·ªá kh√¥ng
     * GET /api/auth/reset-password/validate?token={token}
     * Public endpoint - ƒë·ªÉ frontend check token tr∆∞·ªõc khi show form
     */
    @GetMapping("/reset-password/validate")
    @Operation(
        summary = "üåê Validate token reset (B∆∞·ªõc 2)", 
        description = """
            **Access:** üåê Public - Kh√¥ng c·∫ßn authentication
            
            Ki·ªÉm tra token reset password c√≤n h·ª£p l·ªá kh√¥ng.
            
            **Use Case:**
            - Frontend check token khi user click link trong email
            - Hi·ªÉn th·ªã form reset password n·∫øu valid
            - Hi·ªÉn th·ªã error n·∫øu expired/invalid
            
            **Validations:**
            - Token t·ªìn t·∫°i trong DB
            - Token ch∆∞a h·∫øt h·∫°n (30 ph√∫t)
            - Token ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng
            
            **Response:**
            - true: Token h·ª£p l·ªá, cho ph√©p reset
            - false: Token expired/invalid
            """
    )
    public ResponseEntity<ApiResponse<Boolean>> validateResetToken(
            @RequestParam String token) {
        
        boolean isValid = passwordResetService.validatePasswordResetToken(token);
        
        if (isValid) {
            return ResponseEntity.ok(ApiResponse.success(true, 
                "Token h·ª£p l·ªá"));
        } else {
            return ResponseEntity.badRequest().body(ApiResponse.error(
                "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n"));
        }
    }
    
    /**
     * B∆∞·ªõc 3: Reset password v·ªõi token
     * POST /api/auth/reset-password
     * Public endpoint - user ch∆∞a ƒëƒÉng nh·∫≠p
     */
    @PostMapping("/reset-password")
    @Operation(
        summary = "üåê Reset m·∫≠t kh·∫©u (B∆∞·ªõc 3)", 
        description = """
            **Access:** üåê Public - Kh√¥ng c·∫ßn authentication
            
            Reset password v·ªõi token t·ª´ email.
            
            **Flow:**
            1. User nh·∫≠p password m·ªõi + confirm
            2. System validate token
            3. Check password match
            4. Update password (BCrypt hash)
            5. Mark token as used
            6. User c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v·ªõi password m·ªõi
            
            **Validations:**
            - Token valid (ch∆∞a h·∫øt h·∫°n, ch∆∞a d√πng)
            - Password >= 8 k√Ω t·ª±
            - Password match confirm password
            
            **Security:**
            - Token one-time use
            - Password hashed with BCrypt
            - Old tokens deleted after success
            
            **Response:**
            - Success: ƒê·ªïi password th√†nh c√¥ng
            - Error: Token invalid ho·∫∑c passwords kh√¥ng match
            """
    )
    public ResponseEntity<ApiResponse<Void>> resetPassword(
            @Valid @RequestBody ResetPasswordRequest request) {
        
        // Validate password match
        if (!request.getNewPassword().equals(request.getConfirmPassword())) {
            return ResponseEntity.badRequest()
                    .body(ApiResponse.error("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp"));
        }
        
        try {
            passwordResetService.resetPassword(request.getToken(), request.getNewPassword());
            return ResponseEntity.ok(ApiResponse.success(
                "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng. B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v·ªõi m·∫≠t kh·∫©u m·ªõi."));
        } catch (RuntimeException e) {
            return ResponseEntity.badRequest()
                    .body(ApiResponse.error(e.getMessage()));
        }
    }
}
