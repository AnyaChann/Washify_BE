package com.washify.apis.controller;

import com.washify.apis.dto.request.RoleRequest;
import com.washify.apis.dto.response.ApiResponse;
import com.washify.apis.dto.response.RoleResponse;
import com.washify.apis.service.RoleService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * REST Controller x·ª≠ l√Ω c√°c API li√™n quan ƒë·∫øn Role (vai tr√≤ ng∆∞·ªùi d√πng)
 */
@RestController
@RequestMapping("/roles")
@RequiredArgsConstructor
@Tag(name = "üîê Roles", description = "Qu·∫£n l√Ω roles/ph√¢n quy·ªÅn - üîí Admin only")
public class RoleController {
    
    private final RoleService roleService;
    
    /**
     * T·∫°o role m·ªõi
     * POST /api/roles
     * Ch·ªâ Admin
     */
    @PostMapping
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "T·∫°o role m·ªõi", description = "**Access:** üîí Admin only\n\nT·∫°o vai tr√≤ ng∆∞·ªùi d√πng m·ªõi (ADMIN, STAFF, CUSTOMER, etc.)")
    public ResponseEntity<ApiResponse<RoleResponse>> createRole(@Valid @RequestBody RoleRequest request) {
        RoleResponse role = roleService.createRole(request);
        return ResponseEntity.status(HttpStatus.CREATED)
                .body(ApiResponse.success(role, "T·∫°o role th√†nh c√¥ng"));
    }
    
    /**
     * L·∫•y role theo ID
     * GET /api/roles/{id}
     * Ch·ªâ Admin v√† Staff
     */
    @GetMapping("/{id}")
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF')")
    @Operation(summary = "Xem chi ti·∫øt role", description = "**Access:** üîí Admin/Staff\n\nXem th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt role")
    public ResponseEntity<ApiResponse<RoleResponse>> getRoleById(@PathVariable Long id) {
        RoleResponse role = roleService.getRoleById(id);
        return ResponseEntity.ok(ApiResponse.success(role, "L·∫•y th√¥ng tin role th√†nh c√¥ng"));
    }
    
    /**
     * L·∫•y role theo name
     * GET /api/roles/name/{name}
     * Ch·ªâ Admin v√† Staff
     */
    @GetMapping("/name/{name}")
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF')")
    @Operation(summary = "T√¨m role theo t√™n", description = "**Access:** üîí Admin/Staff\n\nT√¨m role b·∫±ng t√™n (VD: ADMIN, STAFF, CUSTOMER)")
    public ResponseEntity<ApiResponse<RoleResponse>> getRoleByName(@PathVariable String name) {
        RoleResponse role = roleService.getRoleByName(name);
        return ResponseEntity.ok(ApiResponse.success(role, "L·∫•y th√¥ng tin role th√†nh c√¥ng"));
    }
    
    /**
     * L·∫•y t·∫•t c·∫£ roles
     * GET /api/roles
     * Ch·ªâ Admin v√† Staff
     */
    @GetMapping
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF')")
    @Operation(summary = "L·∫•y t·∫•t c·∫£ roles", description = "**Access:** üîí Admin/Staff\n\nL·∫•y danh s√°ch t·∫•t c·∫£ vai tr√≤ trong h·ªá th·ªëng")
    public ResponseEntity<ApiResponse<List<RoleResponse>>> getAllRoles() {
        List<RoleResponse> roles = roleService.getAllRoles();
        return ResponseEntity.ok(ApiResponse.success(roles, "L·∫•y danh s√°ch roles th√†nh c√¥ng"));
    }
    
    /**
     * ƒê·∫øm s·ªë user c√≥ role n√†y
     * GET /api/roles/{id}/user-count
     * Ch·ªâ Admin
     */
    @GetMapping("/{id}/user-count")
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "ƒê·∫øm user theo role", description = "**Access:** üîí Admin only\n\nƒê·∫øm s·ªë l∆∞·ª£ng user c√≥ role n√†y")
    public ResponseEntity<ApiResponse<Long>> countUsersByRole(@PathVariable Long id) {
        long count = roleService.countUsersByRoleId(id);
        return ResponseEntity.ok(ApiResponse.success(count, "L·∫•y s·ªë l∆∞·ª£ng user th√†nh c√¥ng"));
    }
    
    /**
     * C·∫≠p nh·∫≠t role
     * PUT /api/roles/{id}
     * Ch·ªâ Admin
     */
    @PutMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "C·∫≠p nh·∫≠t role", description = "**Access:** üîí Admin only\n\nC·∫≠p nh·∫≠t th√¥ng tin vai tr√≤")
    public ResponseEntity<ApiResponse<RoleResponse>> updateRole(
            @PathVariable Long id,
            @Valid @RequestBody RoleRequest request) {
        RoleResponse role = roleService.updateRole(id, request);
        return ResponseEntity.ok(ApiResponse.success(role, "C·∫≠p nh·∫≠t role th√†nh c√¥ng"));
    }
    
    /**
     * X√≥a role
     * DELETE /api/roles/{id}
     * Ch·ªâ Admin
     */
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "X√≥a role", description = "**Access:** üîí Admin only\n\nX√≥a vai tr√≤ (ch·ªâ x√≥a ƒë∆∞·ª£c khi kh√¥ng c√≤n user n√†o s·ª≠ d·ª•ng)")
    public ResponseEntity<ApiResponse<Void>> deleteRole(@PathVariable Long id) {
        roleService.deleteRole(id);
        return ResponseEntity.ok(ApiResponse.success("X√≥a role th√†nh c√¥ng"));
    }
}
