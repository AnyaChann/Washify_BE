package com.washify.apis.controller;

import com.washify.apis.dto.response.ApiResponse;
import com.washify.apis.service.PasswordChange2FAService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

/**
 * Controller x·ª≠ l√Ω x√°c nh·∫≠n b·∫≠t/t·∫Øt b·∫£o m·∫≠t 2 l·ªõp cho vi·ªác ƒë·ªïi password
 * Endpoints public, x√°c th·ª±c qua token trong email
 */
@RestController
@RequestMapping("/api/auth/security/2fa-toggle")
@RequiredArgsConstructor
@Tag(name = "üîë Password Management", description = "Qu√™n m·∫≠t kh·∫©u, ƒë·ªïi m·∫≠t kh·∫©u, reset password")
public class PasswordChange2FAController {

    private final PasswordChange2FAService passwordChange2FAService;

    /**
     * Validate token b·∫≠t/t·∫Øt 2FA (ƒë·ªÉ hi·ªán trang confirm)
     * GET /api/auth/security/2fa-toggle/validate?token={token}
     * Public endpoint
     */
    @GetMapping("/validate")
    @Operation(
        summary = "üåê Validate token toggle 2FA", 
        description = """
            **Access:** üåê Public - Kh√¥ng c·∫ßn authentication
            
            Validate token ƒë·ªÉ b·∫≠t/t·∫Øt 2FA setting.
            
            **Context:**
            - User request b·∫≠t/t·∫Øt 2FA cho password change
            - System g·ª≠i email x√°c nh·∫≠n
            - User click link trong email
            - Frontend call API n√†y ƒë·ªÉ validate
            
            **What is 2FA for Password Change?**
            - Khi B·∫¨T: ƒê·ªïi password ph·∫£i x√°c nh·∫≠n qua email
            - Khi T·∫ÆT: ƒê·ªïi password ngay l·∫≠p t·ª©c (ch·ªâ c·∫ßn password c≈©)
            
            **Response:**
            - Success: Token valid
            - Error: Token expired/invalid
            """
    )
    public ResponseEntity<ApiResponse<Void>> validateToken(@RequestParam String token) {
        boolean isValid = passwordChange2FAService.validate2FAToggleToken(token);
        
        if (isValid) {
            return ResponseEntity.ok(ApiResponse.success("Token h·ª£p l·ªá"));
        } else {
            return ResponseEntity.badRequest()
                .body(ApiResponse.error("Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n"));
        }
    }

    /**
     * X√°c nh·∫≠n b·∫≠t/t·∫Øt b·∫£o m·∫≠t 2 l·ªõp
     * POST /api/auth/security/2fa-toggle/confirm?token={token}
     * Public endpoint
     */
    @PostMapping("/confirm")
    @Operation(
        summary = "üåê X√°c nh·∫≠n toggle 2FA", 
        description = """
            **Access:** üåê Public - Kh√¥ng c·∫ßn authentication (verify qua token)
            
            X√°c nh·∫≠n b·∫≠t/t·∫Øt 2FA cho password change.
            
            **Flow:**
            1. User request toggle 2FA (authenticated endpoint)
            2. System t·∫°o token + send email
            3. User click link trong email
            4. Call API n√†y ƒë·ªÉ confirm
            5. 2FA setting ƒë∆∞·ª£c c·∫≠p nh·∫≠t
            
            **After Enable 2FA:**
            - User ƒë·ªïi password ‚Üí Ph·∫£i x√°c nh·∫≠n qua email
            - TƒÉng b·∫£o m·∫≠t
            
            **After Disable 2FA:**
            - User ƒë·ªïi password ‚Üí ƒê·ªïi ngay (ch·ªâ c·∫ßn old password)
            - Ti·ªán l·ª£i h∆°n
            
            **Response:**
            - Success: C·∫≠p nh·∫≠t 2FA setting th√†nh c√¥ng
            - Error: Token invalid/expired
            """
    )
    public ResponseEntity<ApiResponse<Void>> confirm2FAToggle(@RequestParam String token) {
        passwordChange2FAService.confirm2FAToggle(token);
        return ResponseEntity.ok(
            ApiResponse.success("C√†i ƒë·∫∑t b·∫£o m·∫≠t 2 l·ªõp ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng")
        );
    }
}
