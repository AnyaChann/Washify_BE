package com.washify.apis.controller;

import com.washify.apis.dto.request.BranchRequest;
import com.washify.apis.dto.response.ApiResponse;
import com.washify.apis.dto.response.BranchResponse;
import com.washify.apis.service.BranchService;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * REST Controller x·ª≠ l√Ω c√°c API li√™n quan ƒë·∫øn Branch
 */
@RestController
@RequestMapping("/branches")
@RequiredArgsConstructor
@Tag(name = "Branches", description = "Qu·∫£n l√Ω chi nh√°nh - üîí Admin only")
public class BranchController {
    
    private final BranchService branchService;
    
    /**
     * T·∫°o chi nh√°nh m·ªõi
     * POST /api/branches
     * Ch·ªâ Admin
     */
    @PostMapping
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<ApiResponse<BranchResponse>> createBranch(@Valid @RequestBody BranchRequest request) {
        BranchResponse branch = branchService.createBranch(request);
        return ResponseEntity.status(HttpStatus.CREATED)
                .body(ApiResponse.success(branch, "T·∫°o chi nh√°nh th√†nh c√¥ng"));
    }
    
    /**
     * L·∫•y th√¥ng tin chi nh√°nh theo ID
     * GET /api/branches/{id}
     */
    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<BranchResponse>> getBranchById(@PathVariable Long id) {
        BranchResponse branch = branchService.getBranchById(id);
        return ResponseEntity.ok(ApiResponse.success(branch, "L·∫•y th√¥ng tin chi nh√°nh th√†nh c√¥ng"));
    }
    
    /**
     * L·∫•y t·∫•t c·∫£ chi nh√°nh
     * GET /api/branches
     */
    @GetMapping
    public ResponseEntity<ApiResponse<List<BranchResponse>>> getAllBranches() {
        List<BranchResponse> branches = branchService.getAllBranches();
        return ResponseEntity.ok(ApiResponse.success(branches, "L·∫•y danh s√°ch chi nh√°nh th√†nh c√¥ng"));
    }
    
    /**
     * C·∫≠p nh·∫≠t chi nh√°nh
     * PUT /api/branches/{id}
     * Admin: to√†n quy·ªÅn c·∫≠p nh·∫≠t m·ªçi chi nh√°nh
     * Manager: ch·ªâ c·∫≠p nh·∫≠t chi nh√°nh m√† h·ªç qu·∫£n l√Ω
     */
    @PutMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN') or (hasRole('MANAGER') and @branchSecurity.isBranchManager(#id, authentication))")
    public ResponseEntity<ApiResponse<BranchResponse>> updateBranch(
            @PathVariable Long id,
            @Valid @RequestBody BranchRequest request) {
        BranchResponse branch = branchService.updateBranch(id, request);
        return ResponseEntity.ok(ApiResponse.success(branch, "C·∫≠p nh·∫≠t chi nh√°nh th√†nh c√¥ng"));
    }
    
    /**
     * X√≥a chi nh√°nh
     * DELETE /api/branches/{id}
     * Ch·ªâ Admin
     */
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<ApiResponse<Void>> deleteBranch(@PathVariable Long id) {
        branchService.deleteBranch(id);
        return ResponseEntity.ok(ApiResponse.success("X√≥a chi nh√°nh th√†nh c√¥ng"));
    }
    
    // ========================================
    // ENHANCEMENTS - Phase 3: Statistics & Analytics
    // ========================================
    
    /**
     * L·∫•y th·ªëng k√™ t·∫•t c·∫£ chi nh√°nh (so s√°nh hi·ªáu su·∫•t)
     * GET /api/branches/statistics
     * Admin/Staff/Manager
     */
    @GetMapping("/statistics")
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF', 'MANAGER')")
    public ResponseEntity<ApiResponse<List<BranchService.BranchStatistics>>> getAllBranchStatistics() {
        List<BranchService.BranchStatistics> statistics = branchService.getAllBranchStatistics();
        return ResponseEntity.ok(ApiResponse.success(statistics, "L·∫•y th·ªëng k√™ chi nh√°nh th√†nh c√¥ng"));
    }
    
    /**
     * L·∫•y th·ªëng k√™ chi ti·∫øt c·ªßa m·ªôt chi nh√°nh
     * GET /api/branches/{id}/statistics
     * Admin/Staff/Manager
     */
    @GetMapping("/{id}/statistics")
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF', 'MANAGER')")
    public ResponseEntity<ApiResponse<BranchService.BranchDetailStatistics>> getBranchDetailStatistics(@PathVariable Long id) {
        BranchService.BranchDetailStatistics statistics = branchService.getBranchDetailStatistics(id);
        return ResponseEntity.ok(ApiResponse.success(statistics, "L·∫•y th·ªëng k√™ chi ti·∫øt chi nh√°nh th√†nh c√¥ng"));
    }
    
    // ========================================
    // OPERATIONAL ENHANCEMENTS - Phase 3
    // ========================================
    
    /**
     * T√¨m ki·∫øm chi nh√°nh theo nhi·ªÅu ti√™u ch√≠
     * GET /api/branches/search
     */
    @GetMapping("/search")
    @io.swagger.v3.oas.annotations.Operation(
        summary = "T√¨m ki·∫øm chi nh√°nh",
        description = "T√¨m ki·∫øm chi nh√°nh theo t√™n, ƒë·ªãa ch·ªâ ho·∫∑c tr·∫°ng th√°i active. T·∫•t c·∫£ parameters ƒë·ªÅu optional."
    )
    public ResponseEntity<ApiResponse<List<BranchResponse>>> searchBranches(
            @RequestParam(required = false) String name,
            @RequestParam(required = false) String address,
            @RequestParam(required = false) Boolean isActive) {
        List<BranchResponse> branches = branchService.searchBranches(name, address, isActive);
        return ResponseEntity.ok(ApiResponse.success(branches, "T√¨m ki·∫øm chi nh√°nh th√†nh c√¥ng"));
    }
    
    /**
     * T√¨m chi nh√°nh g·∫ßn v·ªã tr√≠ ng∆∞·ªùi d√πng
     * GET /api/branches/nearby
     */
    @GetMapping("/nearby")
    @io.swagger.v3.oas.annotations.Operation(
        summary = "T√¨m chi nh√°nh g·∫ßn ƒë√¢y",
        description = "T√¨m c√°c chi nh√°nh trong b√°n k√≠nh (km) t·ª´ v·ªã tr√≠ hi·ªán t·∫°i. Radius m·∫∑c ƒë·ªãnh l√† 10km."
    )
    public ResponseEntity<ApiResponse<List<BranchResponse>>> findNearbyBranches(
            @RequestParam Double lat,
            @RequestParam Double lng,
            @RequestParam(defaultValue = "10.0") Double radius) {
        List<BranchResponse> branches = branchService.findNearbyBranches(lat, lng, radius);
        return ResponseEntity.ok(ApiResponse.success(branches, 
            "T√¨m th·∫•y " + branches.size() + " chi nh√°nh trong b√°n k√≠nh " + radius + " km"));
    }
}

