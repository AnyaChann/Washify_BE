package com.washify.apis.controller;

import com.washify.apis.dto.request.LoginRequest;
import com.washify.apis.dto.request.RegisterRequest;
import com.washify.apis.dto.response.ApiResponse;
import com.washify.apis.dto.response.AuthResponse;
import com.washify.apis.entity.Role;
import com.washify.apis.entity.User;
import com.washify.apis.enums.RoleType;
import com.washify.apis.exception.BadRequestException;
import com.washify.apis.exception.DuplicateResourceException;
import com.washify.apis.repository.RoleRepository;
import com.washify.apis.repository.UserRepository;
import com.washify.apis.security.JwtTokenProvider;
import com.washify.apis.service.EmailVerificationService;
import com.washify.apis.util.ValidationUtils;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

/**
 * Authentication Controller - X·ª≠ l√Ω ƒëƒÉng nh·∫≠p, ƒëƒÉng k√Ω
 */
@Slf4j
@RestController
@RequestMapping("/auth")
@RequiredArgsConstructor
@Tag(name = "üîê Authentication", description = "API cho ƒëƒÉng nh·∫≠p v√† ƒëƒÉng k√Ω")
public class AuthController {

    private final AuthenticationManager authenticationManager;
    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final PasswordEncoder passwordEncoder;
    private final JwtTokenProvider jwtTokenProvider;
    private final EmailVerificationService emailVerificationService;

    /**
     * ƒêƒÉng nh·∫≠p
     */
    @PostMapping("/login")
    @Operation(
        summary = "üåê ƒêƒÉng nh·∫≠p", 
        description = """
            **Access:** üåê Public - Kh√¥ng c·∫ßn authentication
            
            ƒêƒÉng nh·∫≠p v·ªõi username v√† password ƒë·ªÉ l·∫•y JWT token.
            
            **Flow:**
            1. G·ª≠i username + password
            2. Server x√°c th·ª±c
            3. Tr·∫£ v·ªÅ JWT token + user info
            4. S·ª≠ d·ª•ng token cho c√°c API kh√°c
            
            **Response:**
            - Token: JWT token (valid 24h)
            - User info: id, username, email, roles
            """
    )
    public ResponseEntity<ApiResponse<AuthResponse>> login(@Valid @RequestBody LoginRequest loginRequest) {
        log.info("Login attempt for user: {}", loginRequest.getUsername());

        // Authenticate
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        loginRequest.getUsername(),
                        loginRequest.getPassword()
                )
        );

        SecurityContextHolder.getContext().setAuthentication(authentication);

        // Generate JWT token
        String token = jwtTokenProvider.generateToken(authentication);

        // Get user info
        User user = userRepository.findByUsername(loginRequest.getUsername())
                .orElseThrow(() -> new BadRequestException("User not found"));

        AuthResponse authResponse = AuthResponse.builder()
                .token(token)
                .tokenType("Bearer")
                .userId(user.getId())
                .username(user.getUsername())
                .email(user.getEmail())
                .fullName(user.getFullName())
                .roles(user.getRoles().stream().map(Role::getName).toList())
                .requirePasswordChange(user.getRequirePasswordChange() != null && user.getRequirePasswordChange())
                .build();

        log.info("User {} logged in successfully. Require password change: {}", 
                loginRequest.getUsername(), user.getRequirePasswordChange());

        return ResponseEntity.ok(ApiResponse.<AuthResponse>builder()
                .success(true)
                .message("ƒêƒÉng nh·∫≠p th√†nh c√¥ng")
                .data(authResponse)
                .timestamp(LocalDateTime.now())
                .build());
    }

    /**
     * ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
     */
    @PostMapping("/register")
    @Operation(
        summary = "üåê ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi", 
        description = """
            **Access:** üåê Public - Kh√¥ng c·∫ßn authentication
            
            ƒêƒÉng k√Ω t√†i kho·∫£n kh√°ch h√†ng m·ªõi (role: CUSTOMER).
            
            **Email Verification:**
            - Format check (RFC 5322)
            - Disposable email check (block tempmail, guerrillamail, etc.)
            - MX record check (verify domain t·ªìn t·∫°i)
            
            **Validations:**
            - Username: 3-20 k√Ω t·ª±, ch·ªâ ch·ªØ c√°i, s·ªë, d·∫•u ch·∫•m, g·∫°ch
            - Password: T·ªëi thi·ªÉu 8 k√Ω t·ª±
            - Email: Format h·ª£p l·ªá, kh√¥ng ph·∫£i email t·∫°m th·ªùi
            - Phone: Format Vi·ªát Nam (0901234567)
            
            **Response:**
            - JWT token t·ª± ƒë·ªông (ƒëƒÉng nh·∫≠p lu√¥n)
            - User info v·ªõi role CUSTOMER
            """
    )
    public ResponseEntity<ApiResponse<AuthResponse>> register(@Valid @RequestBody RegisterRequest registerRequest) {
        log.info("Register attempt for user: {}", registerRequest.getUsername());

        // ===== EMAIL VERIFICATION =====
        // Level 1: Format validation
        if (!emailVerificationService.isValidFormat(registerRequest.getEmail())) {
            throw new BadRequestException("Email kh√¥ng h·ª£p l·ªá: Format sai");
        }

        // Level 2: Disposable email check
        if (emailVerificationService.isDisposableEmail(registerRequest.getEmail())) {
            throw new BadRequestException("Email kh√¥ng h·ª£p l·ªá: Kh√¥ng ch·∫•p nh·∫≠n email t·∫°m th·ªùi/·∫£o");
        }

        // Level 3: MX record check (verify domain can receive emails)
        if (!emailVerificationService.hasMXRecord(registerRequest.getEmail())) {
            throw new BadRequestException("Email kh√¥ng h·ª£p l·ªá: Domain kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng th·ªÉ nh·∫≠n email");
        }
        
        log.info("Email {} verified successfully", registerRequest.getEmail());
        // ===== END EMAIL VERIFICATION =====

        // Validate
        if (!ValidationUtils.isValidEmail(registerRequest.getEmail())) {
            throw new BadRequestException("Email kh√¥ng h·ª£p l·ªá");
        }

        if (!ValidationUtils.isValidUsername(registerRequest.getUsername())) {
            throw new BadRequestException("Username kh√¥ng h·ª£p l·ªá. Username ph·∫£i t·ª´ 3-20 k√Ω t·ª±, ch·ªâ ch·ª©a ch·ªØ c√°i, s·ªë, d·∫•u ch·∫•m, g·∫°ch d∆∞·ªõi v√† g·∫°ch ngang");
        }

        // Check if username exists
        if (userRepository.existsByUsername(registerRequest.getUsername())) {
            throw new DuplicateResourceException("User", "username", registerRequest.getUsername());
        }

        // Check if email exists
        if (userRepository.existsByEmail(registerRequest.getEmail())) {
            throw new DuplicateResourceException("User", "email", registerRequest.getEmail());
        }

        // Create user
        User user = new User();
        user.setUsername(registerRequest.getUsername());
        user.setEmail(registerRequest.getEmail());
        user.setPassword(passwordEncoder.encode(registerRequest.getPassword()));
        user.setFullName(registerRequest.getFullName());
        user.setPhone(registerRequest.getPhoneNumber());
        user.setAddress(registerRequest.getAddress());
        user.setIsActive(true);
        user.setCreatedAt(LocalDateTime.now());
        user.setUpdatedAt(LocalDateTime.now());

        // Assign CUSTOMER role by default
        Role customerRole = roleRepository.findByName(RoleType.CUSTOMER.name())
                .orElseGet(() -> {
                    Role newRole = new Role();
                    newRole.setName(RoleType.CUSTOMER.name());
                    newRole.setDescription("Kh√°ch h√†ng");
                    return roleRepository.save(newRole);
                });

        Set<Role> roles = new HashSet<>();
        roles.add(customerRole);
        user.setRoles(roles);

        // Save user
        user = userRepository.save(user);

        // Generate token
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        registerRequest.getUsername(),
                        registerRequest.getPassword()
                )
        );
        String token = jwtTokenProvider.generateToken(authentication);

        AuthResponse authResponse = AuthResponse.builder()
                .token(token)
                .tokenType("Bearer")
                .userId(user.getId())
                .username(user.getUsername())
                .email(user.getEmail())
                .fullName(user.getFullName())
                .roles(user.getRoles().stream().map(Role::getName).toList())
                .build();

        log.info("User {} registered successfully", registerRequest.getUsername());

        return ResponseEntity.status(HttpStatus.CREATED)
                .body(ApiResponse.<AuthResponse>builder()
                        .success(true)
                        .message("ƒêƒÉng k√Ω th√†nh c√¥ng")
                        .data(authResponse)
                        .timestamp(LocalDateTime.now())
                        .build());
    }

    /**
     * ƒê·ªïi m·∫≠t kh·∫©u l·∫ßn ƒë·∫ßu cho Guest User
     */
    @PostMapping("/first-time-password-change")
    @Operation(
        summary = "üîê ƒê·ªïi m·∫≠t kh·∫©u l·∫ßn ƒë·∫ßu (Guest User)", 
        description = """
            **Access:** üîê Authenticated - Y√™u c·∫ßu ƒëƒÉng nh·∫≠p (GUEST role)
            
            ƒê·ªïi m·∫≠t kh·∫©u l·∫ßn ƒë·∫ßu cho Guest User sau khi login.
            
            **Flow:**
            1. Guest User ƒëƒÉng nh·∫≠p v·ªõi password m·∫∑c ƒë·ªãnh (Guest@123456)
            2. Backend tr·∫£ v·ªÅ requirePasswordChange = true
            3. Frontend redirect ƒë·∫øn trang ƒë·ªïi m·∫≠t kh·∫©u
            4. Guest User nh·∫≠p m·∫≠t kh·∫©u m·ªõi
            5. Backend c·∫≠p nh·∫≠t password v√† set requirePasswordChange = false
            
            **Note:**
            - Kh√¥ng c·∫ßn nh·∫≠p current password (v√¨ ƒë√£ login)
            - Ch·ªâ Guest User m·ªõi ƒë∆∞·ª£c d√πng endpoint n√†y
            - Sau khi ƒë·ªïi password th√†nh c√¥ng, requirePasswordChange = false
            
            **Validations:**
            - New password: T·ªëi thi·ªÉu 6 k√Ω t·ª±
            - Confirm password: Ph·∫£i kh·ªõp v·ªõi new password
            """
    )
    public ResponseEntity<ApiResponse<String>> firstTimePasswordChange(
            @Valid @RequestBody com.washify.apis.dto.request.FirstTimePasswordChangeRequest request,
            Authentication authentication) {
        
        String username = authentication.getName();
        log.info("First-time password change request for user: {}", username);
        
        // Get user
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new BadRequestException("User not found"));
        
        // Ki·ªÉm tra xem user c√≥ requirePasswordChange kh√¥ng
        if (user.getRequirePasswordChange() == null || !user.getRequirePasswordChange()) {
            throw new BadRequestException("T√†i kho·∫£n n√†y kh√¥ng c·∫ßn ƒë·ªïi m·∫≠t kh·∫©u l·∫ßn ƒë·∫ßu");
        }
        
        // Validate passwords match
        if (!request.getNewPassword().equals(request.getConfirmPassword())) {
            throw new BadRequestException("M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp");
        }
        
        // Update password
        user.setPassword(passwordEncoder.encode(request.getNewPassword()));
        user.setRequirePasswordChange(false);
        user.setUpdatedAt(LocalDateTime.now());
        userRepository.save(user);
        
        log.info("User {} changed password successfully on first login", username);
        
        return ResponseEntity.ok(ApiResponse.<String>builder()
                .success(true)
                .message("ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng")
                .data("Password updated successfully. You can now use the new password.")
                .timestamp(LocalDateTime.now())
                .build());
    }

    /**
     * Validate token
     */
    @GetMapping("/validate")
    @Operation(
        summary = "üåê Ki·ªÉm tra token h·ª£p l·ªá", 
        description = """
            **Access:** üåê Public - Kh√¥ng c·∫ßn authentication
            
            Validate JWT token c√≥ c√≤n h·ª£p l·ªá kh√¥ng.
            
            **Use Cases:**
            - Frontend check token tr∆∞·ªõc khi g·ªçi API
            - Verify token sau khi nh·∫≠n t·ª´ external source
            - Auto logout n·∫øu token expired
            
            **Header:**
            - Authorization: Bearer {token}
            
            **Response:**
            - true: Token h·ª£p l·ªá
            - false: Token expired ho·∫∑c invalid
            """
    )
    public ResponseEntity<ApiResponse<Boolean>> validateToken(@RequestHeader("Authorization") String authHeader) {
        try {
            if (authHeader != null && authHeader.startsWith("Bearer ")) {
                String token = authHeader.substring(7);
                boolean isValid = jwtTokenProvider.validateToken(token);
                
                return ResponseEntity.ok(ApiResponse.<Boolean>builder()
                        .success(true)
                        .message(isValid ? "Token h·ª£p l·ªá" : "Token kh√¥ng h·ª£p l·ªá")
                        .data(isValid)
                        .timestamp(LocalDateTime.now())
                        .build());
            }
            
            return ResponseEntity.ok(ApiResponse.<Boolean>builder()
                    .success(false)
                    .message("Token kh√¥ng ƒë∆∞·ª£c cung c·∫•p")
                    .data(false)
                    .timestamp(LocalDateTime.now())
                    .build());
        } catch (Exception e) {
            return ResponseEntity.ok(ApiResponse.<Boolean>builder()
                    .success(false)
                    .message("Token kh√¥ng h·ª£p l·ªá: " + e.getMessage())
                    .data(false)
                    .timestamp(LocalDateTime.now())
                    .build());
        }
    }
}
