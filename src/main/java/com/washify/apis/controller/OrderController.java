package com.washify.apis.controller;

import com.washify.apis.dto.request.OrderRequest;
import com.washify.apis.dto.response.ApiResponse;
import com.washify.apis.dto.response.OrderResponse;
import com.washify.apis.service.OrderService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * REST Controller x·ª≠ l√Ω c√°c API li√™n quan ƒë·∫øn Order
 */
@RestController
@RequestMapping("/orders")
@RequiredArgsConstructor
@io.swagger.v3.oas.annotations.tags.Tag(name = "üì¶ Orders", description = "Qu·∫£n l√Ω ƒë∆°n h√†ng - üë§ Customer/Staff/Admin")
public class OrderController {
    
    private final OrderService orderService;
    
    /**
     * T·∫°o ƒë∆°n h√†ng m·ªõi
     * POST /api/orders
     * Customer t·∫°o ƒë∆°n cho m√¨nh, Staff t·∫°o cho kh√°ch
     */
    @PostMapping
    @PreAuthorize("hasAnyRole('CUSTOMER', 'STAFF', 'ADMIN')")
    public ResponseEntity<ApiResponse<OrderResponse>> createOrder(@Valid @RequestBody OrderRequest request) {
        OrderResponse order = orderService.createOrder(request);
        return ResponseEntity.status(HttpStatus.CREATED)
                .body(ApiResponse.success(order, "T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng"));
    }
    
    /**
     * L·∫•y th√¥ng tin ƒë∆°n h√†ng theo ID
     * GET /api/orders/{id}
     * Admin/Staff xem t·∫•t c·∫£, Customer xem ƒë∆°n c·ªßa m√¨nh
     */
    @GetMapping("/{id}")
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF', 'CUSTOMER')")
    public ResponseEntity<ApiResponse<OrderResponse>> getOrderById(@PathVariable Long id) {
        OrderResponse order = orderService.getOrderById(id);
        return ResponseEntity.ok(ApiResponse.success(order, "L·∫•y th√¥ng tin ƒë∆°n h√†ng th√†nh c√¥ng"));
    }
    
    /**
     * L·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa user
     * GET /api/orders/user/{userId}
     * Admin/Staff xem t·∫•t c·∫£, User xem c·ªßa m√¨nh
     */
    @GetMapping("/user/{userId}")
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF') or #userId == authentication.principal.id")
    public ResponseEntity<ApiResponse<List<OrderResponse>>> getOrdersByUserId(@PathVariable Long userId) {
        List<OrderResponse> orders = orderService.getOrdersByUserId(userId);
        return ResponseEntity.ok(ApiResponse.success(orders, "L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng"));
    }
    
    /**
     * L·∫•y danh s√°ch ƒë∆°n h√†ng theo tr·∫°ng th√°i
     * GET /api/orders/status/{status}
     * Ch·ªâ Admin v√† Staff
     */
    @GetMapping("/status/{status}")
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF', 'MANAGER')")
    public ResponseEntity<ApiResponse<List<OrderResponse>>> getOrdersByStatus(@PathVariable String status) {
        List<OrderResponse> orders = orderService.getOrdersByStatus(status);
        return ResponseEntity.ok(ApiResponse.success(orders, "L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng"));
    }
    
    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
     * PATCH /api/orders/{id}/status
     * Ch·ªâ Staff v√† Admin
     */
    @PatchMapping("/{id}/status")
    @PreAuthorize("hasAnyRole('STAFF', 'ADMIN')")
    public ResponseEntity<ApiResponse<OrderResponse>> updateOrderStatus(
            @PathVariable Long id,
            @RequestParam String status) {
        OrderResponse order = orderService.updateOrderStatus(id, status);
        return ResponseEntity.ok(ApiResponse.success(order, "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng"));
    }
    
    /**
     * H·ªßy ƒë∆°n h√†ng
     * PATCH /api/orders/{id}/cancel
     * Customer h·ªßy ƒë∆°n c·ªßa m√¨nh, Staff/Admin h·ªßy b·∫•t k·ª≥ ƒë∆°n n√†o
     */
    @PatchMapping("/{id}/cancel")
    @PreAuthorize("hasAnyRole('CUSTOMER', 'STAFF', 'ADMIN', 'MANAGER')")
    public ResponseEntity<ApiResponse<OrderResponse>> cancelOrder(@PathVariable Long id) {
        OrderResponse order = orderService.cancelOrder(id);
        return ResponseEntity.ok(ApiResponse.success(order, "H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng"));
    }
    
    // ========================================
    // ENHANCEMENTS - Phase 2
    // ========================================
    
    /**
     * L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng
     * GET /api/orders
     * Ch·ªâ Admin v√† Staff
     */
    @GetMapping
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF')")
    public ResponseEntity<ApiResponse<List<OrderResponse>>> getAllOrders() {
        List<OrderResponse> orders = orderService.getAllOrders();
        return ResponseEntity.ok(ApiResponse.success(orders, "L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng"));
    }
    
    /**
     * √Åp d·ª•ng m√£ khuy·∫øn m√£i cho ƒë∆°n h√†ng
     * POST /api/orders/{id}/promotions
     * Customer √°p d·ª•ng cho ƒë∆°n c·ªßa m√¨nh, Staff/Admin √°p d·ª•ng cho b·∫•t k·ª≥ ƒë∆°n n√†o
     */
    @PostMapping("/{id}/promotions")
    @PreAuthorize("hasAnyRole('CUSTOMER', 'STAFF', 'ADMIN')")
    public ResponseEntity<ApiResponse<OrderResponse>> applyPromotion(
            @PathVariable Long id,
            @RequestParam String code) {
        OrderResponse order = orderService.applyPromotion(id, code);
        return ResponseEntity.ok(ApiResponse.success(order, "√Åp d·ª•ng m√£ khuy·∫øn m√£i th√†nh c√¥ng"));
    }
    
    /**
     * X√≥a m√£ khuy·∫øn m√£i kh·ªèi ƒë∆°n h√†ng
     * DELETE /api/orders/{id}/promotions
     * Customer x√≥a kh·ªèi ƒë∆°n c·ªßa m√¨nh, Staff/Admin x√≥a kh·ªèi b·∫•t k·ª≥ ƒë∆°n n√†o
     */
    @DeleteMapping("/{id}/promotions")
    @PreAuthorize("hasAnyRole('CUSTOMER', 'STAFF', 'ADMIN')")
    public ResponseEntity<ApiResponse<OrderResponse>> removePromotion(
            @PathVariable Long id,
            @RequestParam String code) {
        OrderResponse order = orderService.removePromotion(id, code);
        return ResponseEntity.ok(ApiResponse.success(order, "X√≥a m√£ khuy·∫øn m√£i th√†nh c√¥ng"));
    }
    
    // ========================================
    // PHASE 3: STATISTICS & ANALYTICS
    // ========================================
    
    /**
     * L·∫•y th·ªëng k√™ t·ªïng quan v·ªÅ orders
     * GET /api/orders/statistics
     * Admin, Staff, Manager
     */
    @GetMapping("/statistics")
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF', 'MANAGER')")
    @io.swagger.v3.oas.annotations.Operation(
        summary = "L·∫•y th·ªëng k√™ orders",
        description = "Th·ªëng k√™ t·ªïng quan: t·ªïng s·ªë orders, theo status, doanh thu, gi√° tr·ªã trung b√¨nh. ADMIN, STAFF v√† MANAGER."
    )
    public ResponseEntity<ApiResponse<OrderService.OrderStatistics>> getOrderStatistics() {
        OrderService.OrderStatistics stats = orderService.getOrderStatistics();
        return ResponseEntity.ok(ApiResponse.success(stats, "L·∫•y th·ªëng k√™ orders th√†nh c√¥ng"));
    }
    
    /**
     * L·∫•y th·ªëng k√™ doanh thu theo kho·∫£ng th·ªùi gian
     * GET /api/orders/statistics/revenue
     * Admin, Staff, Manager
     */
    @GetMapping("/statistics/revenue")
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF', 'MANAGER')")
    @io.swagger.v3.oas.annotations.Operation(
        summary = "Th·ªëng k√™ doanh thu theo th·ªùi gian",
        description = "Doanh thu, s·ªë l∆∞·ª£ng orders, gi√° tr·ªã TB trong kho·∫£ng th·ªùi gian. Format: yyyy-MM-dd'T'HH:mm:ss. ADMIN, STAFF v√† MANAGER."
    )
    public ResponseEntity<ApiResponse<OrderService.RevenueStatistics>> getRevenueStatistics(
            @RequestParam @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) 
            java.time.LocalDateTime startDate,
            @RequestParam @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) 
            java.time.LocalDateTime endDate) {
        OrderService.RevenueStatistics stats = orderService.getRevenueStatistics(startDate, endDate);
        return ResponseEntity.ok(ApiResponse.success(stats, "L·∫•y th·ªëng k√™ doanh thu th√†nh c√¥ng"));
    }
    
    /**
     * L·∫•y danh s√°ch top customers
     * GET /api/orders/statistics/top-customers
     * Admin, Staff, Manager
     */
    @GetMapping("/statistics/top-customers")
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF', 'MANAGER')")
    @io.swagger.v3.oas.annotations.Operation(
        summary = "Top customers theo s·ªë l∆∞·ª£ng orders",
        description = "Danh s√°ch top customers v·ªõi s·ªë l∆∞·ª£ng orders v√† t·ªïng gi√° tr·ªã. ADMIN, STAFF v√† MANAGER."
    )
    public ResponseEntity<ApiResponse<List<OrderService.TopCustomer>>> getTopCustomers(
            @RequestParam(defaultValue = "10") int limit) {
        List<OrderService.TopCustomer> topCustomers = orderService.getTopCustomers(limit);
        return ResponseEntity.ok(ApiResponse.success(topCustomers, "L·∫•y top customers th√†nh c√¥ng"));
    }
    
    // ========================================
    // PHASE 3: ADVANCED SEARCH & FILTERING
    // ========================================
    
    /**
     * T√¨m ki·∫øm orders theo nhi·ªÅu ti√™u ch√≠
     * GET /api/orders/search
     * Admin, Staff, Manager
     */
    @GetMapping("/search")
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF', 'MANAGER')")
    @io.swagger.v3.oas.annotations.Operation(
        summary = "T√¨m ki·∫øm orders theo nhi·ªÅu ti√™u ch√≠",
        description = "Search v·ªõi userId, branchId, status, dateFrom, dateTo, minAmount, maxAmount. ADMIN, STAFF v√† MANAGER."
    )
    public ResponseEntity<ApiResponse<List<OrderResponse>>> searchOrders(
            @RequestParam(required = false) Long userId,
            @RequestParam(required = false) Long branchId,
            @RequestParam(required = false) String status,
            @RequestParam(required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) java.time.LocalDateTime dateFrom,
            @RequestParam(required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) java.time.LocalDateTime dateTo,
            @RequestParam(required = false) Double minAmount,
            @RequestParam(required = false) Double maxAmount) {
        List<OrderResponse> orders = orderService.searchOrders(userId, branchId, status, dateFrom, dateTo, minAmount, maxAmount);
        return ResponseEntity.ok(ApiResponse.success(orders, "T√¨m ki·∫øm orders th√†nh c√¥ng"));
    }
    
    /**
     * L·∫•y orders c·ªßa user theo status
     * GET /api/orders/user/{userId}/status/{status}
     * Admin/Staff xem t·∫•t c·∫£, User xem c·ªßa m√¨nh
     */
    @GetMapping("/user/{userId}/status/{status}")
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF', 'MANAGER') or #userId == authentication.principal.id")
    @io.swagger.v3.oas.annotations.Operation(
        summary = "Orders c·ªßa user theo status",
        description = "L·∫•y orders c·ªßa m·ªôt user c·ª• th·ªÉ theo tr·∫°ng th√°i."
    )
    public ResponseEntity<ApiResponse<List<OrderResponse>>> getOrdersByUserAndStatus(
            @PathVariable Long userId,
            @PathVariable String status) {
        List<OrderResponse> orders = orderService.getOrdersByUserAndStatus(userId, status);
        return ResponseEntity.ok(ApiResponse.success(orders, "L·∫•y danh s√°ch orders th√†nh c√¥ng"));
    }
    
    /**
     * L·∫•y orders theo branch
     * GET /api/orders/branch/{branchId}
     * Admin, Staff, Manager
     */
    @GetMapping("/branch/{branchId}")
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF', 'MANAGER')")
    @io.swagger.v3.oas.annotations.Operation(
        summary = "Orders theo chi nh√°nh",
        description = "L·∫•y t·∫•t c·∫£ orders c·ªßa m·ªôt chi nh√°nh. ADMIN, STAFF v√† MANAGER."
    )
    public ResponseEntity<ApiResponse<List<OrderResponse>>> getOrdersByBranch(@PathVariable Long branchId) {
        List<OrderResponse> orders = orderService.getOrdersByBranch(branchId);
        return ResponseEntity.ok(ApiResponse.success(orders, "L·∫•y danh s√°ch orders th√†nh c√¥ng"));
    }
    
    /**
     * L·∫•y orders theo kho·∫£ng th·ªùi gian
     * GET /api/orders/date-range
     * Admin, Staff, Manager
     */
    @GetMapping("/date-range")
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF', 'MANAGER')")
    @io.swagger.v3.oas.annotations.Operation(
        summary = "Orders theo kho·∫£ng th·ªùi gian",
        description = "L·∫•y orders trong kho·∫£ng th·ªùi gian. Format: yyyy-MM-dd'T'HH:mm:ss. ADMIN, STAFF v√† MANAGER."
    )
    public ResponseEntity<ApiResponse<List<OrderResponse>>> getOrdersByDateRange(
            @RequestParam @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) java.time.LocalDateTime startDate,
            @RequestParam @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) java.time.LocalDateTime endDate) {
        List<OrderResponse> orders = orderService.getOrdersByDateRange(startDate, endDate);
        return ResponseEntity.ok(ApiResponse.success(orders, "L·∫•y danh s√°ch orders th√†nh c√¥ng"));
    }
    
    // ========================================
    // BATCH OPERATIONS
    // ========================================
    
    /**
     * C·∫≠p nh·∫≠t status cho nhi·ªÅu orders c√πng l√∫c
     * PATCH /api/orders/batch/status
     * Admin, Staff, Manager
     */
    @PatchMapping("/batch/status")
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF', 'MANAGER')")
    @io.swagger.v3.oas.annotations.Operation(
        summary = "C·∫≠p nh·∫≠t status nhi·ªÅu orders",
        description = "C·∫≠p nh·∫≠t status cho nhi·ªÅu orders c√πng l√∫c. Ch·ªâ ADMIN v√† STAFF."
    )
    public ResponseEntity<ApiResponse<Integer>> batchUpdateStatus(
            @RequestBody @io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Danh s√°ch order IDs v√† status m·ªõi") 
            java.util.Map<String, Object> request) {
        @SuppressWarnings("unchecked")
        List<Long> orderIds = (List<Long>) request.get("orderIds");
        String status = (String) request.get("status");
        
        int updatedCount = orderService.batchUpdateStatus(orderIds, status);
        return ResponseEntity.ok(ApiResponse.success(updatedCount, 
            "C·∫≠p nh·∫≠t status cho " + updatedCount + " orders th√†nh c√¥ng"));
    }
    
    /**
     * H·ªßy nhi·ªÅu orders c√πng l√∫c
     * DELETE /api/orders/batch
     * Ch·ªâ Admin v√† Staff
     */
    @DeleteMapping("/batch")
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF')")
    @io.swagger.v3.oas.annotations.Operation(
        summary = "H·ªßy nhi·ªÅu orders",
        description = "H·ªßy nhi·ªÅu orders c√πng l√∫c (set status = CANCELLED). Ch·ªâ ADMIN v√† STAFF."
    )
    public ResponseEntity<ApiResponse<Integer>> batchCancelOrders(
            @RequestBody @io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Danh s√°ch order IDs c·∫ßn h·ªßy") 
            java.util.Map<String, Object> request) {
        @SuppressWarnings("unchecked")
        List<Long> orderIds = (List<Long>) request.get("orderIds");
        
        int cancelledCount = orderService.batchCancelOrders(orderIds);
        return ResponseEntity.ok(ApiResponse.success(cancelledCount, 
            "H·ªßy " + cancelledCount + " orders th√†nh c√¥ng"));
    }
}
