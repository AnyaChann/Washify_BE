package com.washify.apis.controller;

import com.washify.apis.dto.request.OrderRequest;
import com.washify.apis.dto.response.ApiResponse;
import com.washify.apis.dto.response.OrderResponse;
import com.washify.apis.service.OrderService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * REST Controller x·ª≠ l√Ω c√°c API li√™n quan ƒë·∫øn Order
 */
@RestController
@RequestMapping("/orders")
@RequiredArgsConstructor
@io.swagger.v3.oas.annotations.tags.Tag(name = "üì¶ Orders", description = "Qu·∫£n l√Ω ƒë∆°n h√†ng - üë§ Customer/Staff/Admin")
public class OrderController {
    
    private final OrderService orderService;
    
    /**
     * T·∫°o ƒë∆°n h√†ng m·ªõi
     * POST /api/orders
     * Customer t·∫°o ƒë∆°n cho m√¨nh, Staff t·∫°o cho kh√°ch
     */
    @PostMapping
    @PreAuthorize("hasAnyRole('CUSTOMER', 'STAFF', 'ADMIN')")
    public ResponseEntity<ApiResponse<OrderResponse>> createOrder(@Valid @RequestBody OrderRequest request) {
        OrderResponse order = orderService.createOrder(request);
        return ResponseEntity.status(HttpStatus.CREATED)
                .body(ApiResponse.success(order, "T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng"));
    }
    
    /**
     * L·∫•y th√¥ng tin ƒë∆°n h√†ng theo ID
     * GET /api/orders/{id}
     * Admin/Staff xem t·∫•t c·∫£, Customer xem ƒë∆°n c·ªßa m√¨nh
     */
    @GetMapping("/{id}")
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF', 'CUSTOMER')")
    public ResponseEntity<ApiResponse<OrderResponse>> getOrderById(@PathVariable Long id) {
        OrderResponse order = orderService.getOrderById(id);
        return ResponseEntity.ok(ApiResponse.success(order, "L·∫•y th√¥ng tin ƒë∆°n h√†ng th√†nh c√¥ng"));
    }
    
    /**
     * L·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa user
     * GET /api/orders/user/{userId}
     * Admin/Staff xem t·∫•t c·∫£, User xem c·ªßa m√¨nh
     */
    @GetMapping("/user/{userId}")
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF') or #userId == authentication.principal.id")
    public ResponseEntity<ApiResponse<List<OrderResponse>>> getOrdersByUserId(@PathVariable Long userId) {
        List<OrderResponse> orders = orderService.getOrdersByUserId(userId);
        return ResponseEntity.ok(ApiResponse.success(orders, "L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng"));
    }
    
    /**
     * L·∫•y danh s√°ch ƒë∆°n h√†ng theo tr·∫°ng th√°i
     * GET /api/orders/status/{status}
     * Ch·ªâ Admin v√† Staff
     */
    @GetMapping("/status/{status}")
    @PreAuthorize("hasAnyRole('ADMIN', 'STAFF')")
    public ResponseEntity<ApiResponse<List<OrderResponse>>> getOrdersByStatus(@PathVariable String status) {
        List<OrderResponse> orders = orderService.getOrdersByStatus(status);
        return ResponseEntity.ok(ApiResponse.success(orders, "L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng"));
    }
    
    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
     * PATCH /api/orders/{id}/status
     * Ch·ªâ Staff v√† Admin
     */
    @PatchMapping("/{id}/status")
    @PreAuthorize("hasAnyRole('STAFF', 'ADMIN')")
    public ResponseEntity<ApiResponse<OrderResponse>> updateOrderStatus(
            @PathVariable Long id,
            @RequestParam String status) {
        OrderResponse order = orderService.updateOrderStatus(id, status);
        return ResponseEntity.ok(ApiResponse.success(order, "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng"));
    }
    
    /**
     * H·ªßy ƒë∆°n h√†ng
     * PATCH /api/orders/{id}/cancel
     * Customer h·ªßy ƒë∆°n c·ªßa m√¨nh, Staff/Admin h·ªßy b·∫•t k·ª≥ ƒë∆°n n√†o
     */
    @PatchMapping("/{id}/cancel")
    @PreAuthorize("hasAnyRole('CUSTOMER', 'STAFF', 'ADMIN')")
    public ResponseEntity<ApiResponse<OrderResponse>> cancelOrder(@PathVariable Long id) {
        OrderResponse order = orderService.cancelOrder(id);
        return ResponseEntity.ok(ApiResponse.success(order, "H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng"));
    }
}
